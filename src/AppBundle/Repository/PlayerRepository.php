<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends EntityRepository
{

    public function getLeaderBoard(int $timesPlayed, $maxResults)
    {
        return $this->createQueryBuilder('p')
            ->select('p.name as name, AVG(s.score) as average_score, COUNT(s.id) as times_played')
            ->join('AppBundle:Score', 's', 'WITH', 'p.id = s.player')
            ->groupBy('p.id')
            ->having('times_played >= :times_played')
            ->orderBy('average_score', 'DESC')
            ->setParameter('times_played', $timesPlayed)
            ->setMaxResults($maxResults)
            ->getQuery()
            ->getResult()
        ;
    }

    public function getNumberOfWins(string $userName)
    {
        return $this->createQueryBuilder('p')
            ->select('COUNT(g.id) as games_winned')
            ->join('AppBundle:Game', 'g', 'WITH', 'p.id = g.winner')
            ->where('p.name = :name')
            ->setParameter('name', $userName)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getNumberOfLosses(string $userName)
    {
        return $this->createQueryBuilder('p')
            ->select('COUNT(g.id) as games_losed')
            ->join('AppBundle:Game', 'g', 'WITH', 'p.id <> g.winner')
            ->join('AppBundle:Score', 's', 'WITH', 's.game = g.id')
            ->where('p.name = :name')
            ->andWhere('s.player = p.id')
            ->setParameter('name', $userName)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function averageScore(string $userName)
    {
        return $this->createQueryBuilder('p')
            ->select('AVG(s.score) as average_score')
            ->join('AppBundle:Score', 's', 'WITH', 'p.id = s.player')
            ->where('p.name = :name')
            ->setParameter('name', $userName)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    public function highestScore(string $userName)
    {
        return $this->createQueryBuilder('p')
            ->select('MAX(s.score) as max_score, p.id as player_id, g.createdAt as game_date, opponent.name as opponent_name')
            ->join('AppBundle:Score', 's', 'WITH', 's.player = p.id')
            ->join('AppBundle:Game', 'g', 'WITH', 's.game = g.id')
            ->join('AppBundle:Score', 'opponent_score', 'WITH', 'g.id = opponent_score.game AND opponent_score.player <> p.id')
            ->join('AppBundle:Player', 'opponent', 'WITH', 'opponent_score.player = opponent.id')
            ->where('p.name = :name')
            ->groupBy('g.id, opponent.id')
            ->having('max_score = (SELECT MAX(s2.score) FROM AppBundle:Score s2 WHERE s2.player = player_id)')
            ->setParameter('name', $userName)
            ->getQuery()
            ->getSingleResult()
            ;
    }
}
